name: Docker Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha

    - name: Extract metadata (tags, labels) for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha

    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Create test environment file
      run: |
        cat > .env << EOF
        GEMINI_API_KEY=test_key_for_build
        GITHUB_TOKEN=test_token
        CHROMA_HOST=chroma-db
        CHROMA_PORT=8000
        ENVIRONMENT=test
        REACT_APP_API_URL=http://localhost:8000
        CORS_ORIGINS=http://localhost:3000,http://localhost:80
        LOG_LEVEL=INFO
        EOF

    - name: Test Docker Compose build
      run: |
        docker-compose -f docker-compose.yml config
        docker-compose -f docker-compose.yml build --parallel

    - name: Start services for integration test
      run: |
        docker-compose up -d
        sleep 30

    - name: Test backend health
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'

    - name: Test frontend availability
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:80; do sleep 2; done'

    - name: Test ChromaDB availability
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8001/api/v1/heartbeat; do sleep 2; done'

    - name: Run backend tests
      run: |
        docker-compose exec -T backend python -m pytest tests/ -v || true

    - name: Show service logs on failure
      if: failure()
      run: |
        echo "=== Backend Logs ==="
        docker-compose logs backend
        echo "=== Frontend Logs ==="
        docker-compose logs frontend
        echo "=== ChromaDB Logs ==="
        docker-compose logs chroma-db

    - name: Clean up
      if: always()
      run: |
        docker-compose down -v
        docker system prune -f